package queue.priority.queue;

// This works fine in case of Unique elements

import java.util.PriorityQueue ;
public class KthLargestElementInArray {

	public static void main(String[] args) {
	
		int arr[] = {4,5,6,8,9,10} ;
		System.out.println(kthLargestElement(arr, 3));;

	}
	
	public static int kthLargestElement(int[] arr, int k) {
		
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		if(arr.length < k || k < 0) {
			System.out.println("Kth largest element does not exists");
			return -1;
		}
		
		for(int i = 0 ; i < k ; i++) {  // create min-heap of k size
			pq.add(arr[i]) ;
 		}
		
		for(int i = k ; i < arr.length ; i++) {
			
			if(pq.peek() < arr[i]) {
				pq.poll() ;
				pq.add(arr[i]) ;
			}
		}
		for(int n : pq ) {
			System.out.print( n + " ");
		}
		System.out.println();
		return pq.peek() ;  // retrun the element which is at the top of min-heap 
	}

}
